// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/zsandibe/medods-service/internal/domain"
	entity "github.com/zsandibe/medods-service/internal/entity"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockService) Create(ctx context.Context, guid uuid.UUID, ip string) (domain.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, guid, ip)
	ret0, _ := ret[0].(domain.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(ctx, guid, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, guid, ip)
}

// GetAllSessions mocks base method.
func (m *MockService) GetAllSessions(ctx context.Context) ([]*entity.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSessions", ctx)
	ret0, _ := ret[0].([]*entity.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSessions indicates an expected call of GetAllSessions.
func (mr *MockServiceMockRecorder) GetAllSessions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSessions", reflect.TypeOf((*MockService)(nil).GetAllSessions), ctx)
}

// GetSessionById mocks base method.
func (m *MockService) GetSessionById(ctx context.Context, sessionId uuid.UUID) (*entity.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionById", ctx, sessionId)
	ret0, _ := ret[0].(*entity.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionById indicates an expected call of GetSessionById.
func (mr *MockServiceMockRecorder) GetSessionById(ctx, sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionById", reflect.TypeOf((*MockService)(nil).GetSessionById), ctx, sessionId)
}

// NotifyToEmail mocks base method.
func (m *MockService) NotifyToEmail(oldIp, newIp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyToEmail", oldIp, newIp)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyToEmail indicates an expected call of NotifyToEmail.
func (mr *MockServiceMockRecorder) NotifyToEmail(oldIp, newIp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyToEmail", reflect.TypeOf((*MockService)(nil).NotifyToEmail), oldIp, newIp)
}

// Update mocks base method.
func (m *MockService) Update(ctx context.Context, sessionId uuid.UUID) (domain.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, sessionId)
	ret0, _ := ret[0].(domain.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(ctx, sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), ctx, sessionId)
}
